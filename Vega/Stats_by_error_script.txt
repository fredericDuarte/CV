{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "description": "An example of Cartesian layouts for a node-link diagram of hierarchical data.",
  "width": 1200,
  "height": 1500,
  "padding": 5,
  "autosize":"none"

  "data": [
       {
      "name": "tree",

      "url": {
         %context%:"true",

         "index": "al_zur_p0281_s0638_errorlog" ,
         "body":{
                   "aggs": {
                    "table": {
                      "composite": {
                        "sources": [
                         {"level": {"terms": {"field": "level.keyword"  }}},
                         {"adabo": {"terms": {"field": "adabo.keyword" }}},
                         {"hostname":{"terms":{"field": "host.hostname.keyword"}}}
                        ]
                      },
                       "aggs" : 
                              { "messageLog": { "terms": {"field": "messageLog.keyword"  ,
                              
                              # "size" : 1 
                              }}}
                   }
         
                  }
         
              }
  
      },
      "format": {
        property: "aggregations.table.buckets"
      },
      "transform": [
         {
           "type":"flatten",
           "fields":["messageLog.buckets"],
           "as": ["messageLogKey"]
         },
         

         {
          "type": "project",
          "fields": [ 
            "key.level",
            "key.adabo",
            "key.hostname"
            ,"messageLogKey"
          ],
          "as": [
            "level",
            "adabo",
            "hostname",
            "message"
          ]
        },
        
        {
          "type" : "formula",
          "expr": "(split(datum.message.key,regexp(/(?<=.[a-zA-Z0-9_]{5,}):|\\s\\[/),3))"
          "as": "split0"
        },

        {
          "type" : "formula",
          "expr": "datum.split0.length > 1 ? datum.split0 : (split(datum.message.key,regexp(/(?<=.[a-zA-Z0-9_]{5,})\\s/),3))",
          "as": "split1"
        },

         {
          "type" : "formula",
          "expr": "split(datum.split1[0],regexp(/(?=\\.[^.]+$)./),3)",
          "as": "split2"
        },
        {
          "type" : "formula",
          "expr" :"datum.split2[1]",
          "as": "errorInfo"
           
        },
        {
          "type" : "formula",
          "expr" :"datum.message.doc_count",
          "as": "doCount"
           
        },
       {
          "type": "aggregate",
          "fields":["doCount"],
          "groupby": ["adabo","level", "hostname","errorInfo"],
          "ops":["sum"]
        },
        
         {
          "type": "nest",
          "generate": "true",
          "keys": ["adabo","level", "hostname"]
        },
        
        {
          "type": "tree",
          "size": [{"signal": "height"}, {"signal": "width-400"}],
          "separation": {"signal": "true"},
          "as": ["y", "x", "depth", "children"]
        }
      ]
    },
    {
      "name": "links",
      "source": "tree",
      "transform": [
        { "type": "treelinks" },
          {
            "type": "linkpath",
            "orient": "horizontal",
            "shape": "diagonal"
          }
      ]
    }

  ],

  "scales": [
    {
      "name": "color",
      "type": "linear",
      "range": {"scheme": "magma"},
      "domain": {"data": "tree", "field": "depth"},
      "zero": true
    }
  ],

  "marks": [
    {
      "type": "path",
      "from": {"data": "links"},
      "encode": {
        "update": {
          "path": {"field": "path"},
          "stroke": {"value": "#ccc"}
        }
      }
    },
     {
      "type": "symbol",
      "from": {"data": "tree"},
      "encode": {
        "enter": {
          "size": {"value": 70},
          "stroke": {"value": "#fff"}
        },
        "update": {
          "x": {"field": "x"},
          "y": {"field": "y"},
          "fill": {"scale": "color", "field": "depth"}
        }
      }
    },


    {
      "type": "text",
      "from": {"data": "tree"},
      "encode": {
        "enter": {
          "text": {
            "signal":"datum.key!=null ? datum.key  : datum.errorInfo +'  ['+ datum.sum_doCount  +']'"
             }, 
          "fontSize": {"value": 10},
          "baseline": {"value": "bottom"},
        },
        "update": {
          "x": {"field": "x"},
          "y": {"field": "y", "type":""},
          "dx": {"signal": "datum.children ? 15 : 7"},
          "dy": {"signal": "datum.children ? -12 : 5"},
          "align": {"signal": "datum.children ? 'right' : 'left'"},
        }
      }
    }
  ]
}